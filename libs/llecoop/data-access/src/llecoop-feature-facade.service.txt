/* eslint-disable @typescript-eslint/member-ordering */
import { Inject, inject, Signal, signal } from '@angular/core';

import { VIEW_CONFIG } from '@plastik/core/cms-layout/data-access';
import { BaseEntity } from '@plastik/core/entities';
import { FilterArrayPipeConfig } from '@plastik/shared/filter-array-pipe';
import {
  TABLE_TOKEN,
  TableControlStructure,
  TableSorting,
  TableStructureConfig,
} from '@plastik/shared/table/entities';
import { STORE_TOKEN, StoreFeatureToken } from './core-store';
import { TableWithFilteringFacade } from '@plastik/core/list-view';

export abstract class LlecoopFeatureFacadeService<T extends BaseEntity>
  implements TableWithFilteringFacade<T>
{
  viewConfig = signal(inject(VIEW_CONFIG).filter(item => item.name === 'product')[0]);

  tableStructure: Signal<TableControlStructure<T>>;
  tableData: Signal<T[]>;
  tableSorting: Signal<TableSorting>;
  tableFilter: Signal<FilterArrayPipeConfig<T>[]>;
  count: Signal<number>;

  constructor(
    @Inject(STORE_TOKEN) protected store: StoreFeatureToken,
    @Inject(TABLE_TOKEN) protected table: TableStructureConfig<unknown>
  ) {
    this.tableStructure = this.table.getTableStructure() as Signal<TableControlStructure<T>>;
    this.tableData = this.store.entities;
    this.tableSorting = this.store.sorting;
    this.tableFilter = this.store.filter;
    this.count = this.store.count;
  }

  onSorting(sorting: TableSorting): void {
    this.store.setSorting(sorting);
  }

  onSearch(searchCriteria: object): void {
    const filtering = this.formatSearchCriteria(searchCriteria) as FilterArrayPipeConfig<T>[];
    this.store.setFilter(filtering);
  }

  private formatSearchCriteria(searchCriteria: object): FilterArrayPipeConfig<T>[] {
    return Object.entries(searchCriteria).map(([key, value]) => {
      return {
        fields: this.tableStructure().filter?.[key] || [],
        value,
      };
    });
  }
}

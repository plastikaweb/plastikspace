rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    function isAuthenticated() {
      return request.auth.uid != null;
    }

    function isVerified() {
      return request.auth.token.email_verified != false;
    }

    function isAdmin() {
      return 'isAdmin' in request.auth.token;
    }

    function hasAdminAccess() {
      return isAuthenticated() && isVerified() && isAdmin();
    }

    function hasCorrectSize() {
      return request.resource.size < 2 * 1024 * 1024;
    }

    function isValidContentType() {
      return request.resource.contentType.matches('image/.*') || request.resource.contentType.matches('application/pdf');
    }

    match /{allPaths=**} {
      allow read, write: if false;
    }

    match /products/{fileName} {
      allow read: if true;
      allow write: if hasAdminAccess() && hasCorrectSize() && isValidContentType();
    }

    match /users/{userId}/{fileName} {
      allow read: if (isAuthenticated() && request.auth.uid == userId) || hasAdminAccess();
      allow write: if isAuthenticated() && request.auth.uid == userId && hasCorrectSize() && isValidContentType();
    }

    match /orders/{orderId}/{fileName} {
      allow read: if (isAuthenticated() && request.auth.uid == orderId) || hasAdminAccess();
      allow write: if hasAdminAccess() && hasCorrectSize();
    }
  }
}
